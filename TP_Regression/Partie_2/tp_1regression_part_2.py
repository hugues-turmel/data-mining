# -*- coding: utf-8 -*-
"""TP_1Regression_Part_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nkTOTXjPjnGg46AwyS30JAIOAAWXzKu0
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.compose import ColumnTransformer

dataset = pd.read_csv('Salary_Data.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values
#voir module précédent

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1.0/3, random_state = 0)

regressor = LinearRegression()
#pas de parametre c’est le modele le plus simple
regressor.fit(X_train, y_train)
#on lance le calcul des regresseurs

y_pred = regressor.predict(X_test)
#y_pred est le vecteur de prédiction sur l’ensemble de test
print(dataset)
Result = regressor.predict([[15]])
#on veut prédire la valeur 15 toute seule

plt.scatter(X_test, y_test, color = 'red')
#on rentre les coordonnees du test set et on precise la couleur pour
#ne pas se mélanger avec la prédiction
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
# On indique que l’on plotte X_train et sa réponse de prédiction en bleue.
plt.title('Salaire vs Experience')
# rajout du titre
plt.xlabel('Experience')
plt.ylabel('Salaire')
# rajout des labels
plt.show()
# Visualisation